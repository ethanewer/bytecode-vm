class List {
	List() {
		this._list = _List();
	}

	push(value) {
		this._list.push(value);
	}

	pop() {
		return this._list.pop();
	}

	_get(i) {
		if (i < 0) i += this._list.len();
		return this._list.get(i);
	}

	_set(i, value) {
		this._list.set(i, value);
	}

	len() {
		return this._list.len();
	}

	map(f) {
		let result = List();
		for (let i = 0; i < this._list.len(); i++) {
			result.push(f(this._list.get(i)));
		}
		return result;
	}

	reduce(f, result) {
		for (let i = 0; i < this._list.len(); i++) {
			result = f(result, this._list.get(i));
		}
		return result;
	}

	filter(f) {
		let result = List();
		for (let i = 0; i < this._list.len(); i++) {
			if (f(this._list.get(i))) result.push(this._list.get(i));
		}
		return result;
	}

	to_string() {
		let result = '[';
		for (let i = 0; i < this._list.len(); i++) {
			result += string(this._list.get(i));
			if (i < this._list.len() - 1) {
				result += ', ';
			}
		}
		result += ']';
		return result;
	}
}

class Map {
	Map() {
		this._map = _Map();
	}

	_get(key) {
		return this._map.get(key);
	}

	_set(key, value) {
		this._map.set(key, value);
	}

	has(key) {
		return this._map.has(key);
	}

	remove(key) {
		this._map.remove(key);
	}

	size() {
		return this._map.size();
	}

	entries() {
		let entries = this._map.entries();
		let result = List();
		for (let i = 0; i < entries.len(); i++) {
			result.push(List());
			result.get(-1).push(entries.get(i).get(0));
			result.get(-1).push(entries.get(i).get(1));
		}
		return result;
	}

	keys() {
		let entries = this._map.entries();
		let result = List();
		for (let i = 0; i < entries.len(); i++) {
			result.push(entries.get(i).get(0));
		}
		return result;
	}

	values() {
		let entries = this._map.entries();
		let result = List();
		for (let i = 0; i < entries.len(); i++) {
			result.push(entries.get(i).get(1));
		}
		return result;
	}

	to_string() {
		let entries = this._map.entries();
		let result = '{';
		for (let i = 0; i < entries.len(); i++) {
			result += string(entries.get(i).get(0)) + ': ' + string(entries.get(i).get(1));

			if (i < entries.len() - 1) {
				result += ', ';
			}
		}
		result += '}';
		return result;
	}
}

class Set {
	Set() {
		this._map = _Map();
	}

	add(item) {
		this._map.set(item, nil);
	}

	has(item) {
		return this._map.has(item);
	}

	remove(item) {
		this._map.remove(item);
	}

	size() {
		return this._map.size();
	}

	items() {
		let entries = this._map.entries();
		let result = List();
		for (let i = 0; i < entries.len(); i++) {
			result.push(entries.get(i).get(0));
		}
		return result;
	}

	to_string() {
		let entries = this._map.entries();
		let result = '{';
		for (let i = 0; i < entries.len(); i++) {
			result += string(entries.get(i).get(0));
			if (i < entries.len() - 1) {
				result += ', ';
			}
		}
		result += '}';
		return result;
	}

	map(f) {
		let items = this.items();
		let result = Set();
		for (let i = 0; i < items.len(); i++) {
			result.add(f(items[i]));
		}
		return result;
	}

	reduce(f, result) {
		let items = this.items();
		for (let i = 0; i < items.len(); i++) {
			result = f(result, items[i]);
		}
		return result;
	}

	filter(f) {
		let items = this.items();
		let result = Set();
		for (let i = 0; i < items.len(); i++) {
			if (f(items[i])) result.add(items[i]);
		}
		return result;
	}

	union(set) {
		let result = Set();
		let items1 = this.items();
		let items2 = set.items();
		for (let i = 0; i < items1.len(); i++) {
			result.add(items1[i]);
		}
		for (let i = 0; i < items2.len(); i++) {
			result.add(items2[i]);
		}
		return result;
	}
	
	intersect(set) {
		let result = Set();
		let items = set.items();
		for (let i = 0; i < items.len(); i++) {
			if (this.has(items[i])) result.add(items[i]);
		}
		return result;
	}
}